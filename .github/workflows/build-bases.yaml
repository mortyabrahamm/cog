name: Build Base Images

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != format('refs/heads/{0}', github.event.repository.default_branch) }}

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go Runtime
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install Python dependencies
        run: |
          python -m pip install '.[dev]'

      - name: 'Build Base-Image command'
        run: |
          make base-image

      - id: matrix
        run: |
          MATRIX_JSON=$(./base-image generate-matrix)
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
        shell: bash

      - name: 'Check Matrix'
        run: |
          jq . <<< '${{ steps.matrix.outputs.matrix }}'

  build:
    name: Build Image
    needs: generate-matrix
    runs-on: ubuntu-latest-8-cores
    strategy:
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v4
        name: 'Checkout Repository'

      - name: 'Set up Buildx'
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          driver-opts: |
            image=moby/buildkit:v0.13.0

      - name: Setup Go Runtime
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: 'Set Python Version'
        run: |
          if [ -z "${{ matrix.python_version }}" ]; then
            echo "::error::Python Version is Required"
            exit 1
          fi
          echo "PYTHON_VERSION=${{ matrix.python_version }}" >> $GITHUB_ENV
        shell: bash

      - name: 'Set Cuda Version'
        run: |
          if [ ! -z "${{ matrix.cuda_version }}" ]; then
            echo "CUDA_VERSION_ARG=--cuda ${{ matrix.cuda_version }}" >> $GITHUB_ENV
          fi
        shell: bash

      - name: 'Set Torch Version'
        run: |
          if [ ! -z "${{ matrix.torch_version }}" ]; then
            echo "TORCH_VERSION_ARG=--torch ${{ matrix.torch_version }}" >> $GITHUB_ENV
          fi
        shell: bash

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install Python dependencies
        run: |
          python -m pip install '.[dev]'

      - name: 'Build Base-Image command'
        run: |
          make base-image

      - name: 'Generate Dockerfile'
        run: |
          ./base-image dockerfile \
            --python ${{ env.PYTHON_VERSION }} \
            ${{ env.CUDA_VERSION_ARG }} \
            ${{ env.TORCH_VERSION_ARG }} >> Dockerfile

      - name: 'Get Image Name and Tag'
        id: image_name
        run: |
          IMAGE_NAME=$(./base-image base-image-name \
            --strip-registry \
            --python ${{ env.PYTHON_VERSION }} \
            ${{ env.CUDA_VERSION_ARG }} \
            ${{ env.TORCH_VERSION_ARG }}
          )
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - id: auth
        name: 'Authenticate to Google Cloud'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/1025538909507/locations/global/workloadIdentityPools/github/providers/github-actions'
          service_account: 'builder@replicate-production.iam.gserviceaccount.com'
          token_format: 'access_token'

      - name: 'Log into US Artifact Registry'
        uses: docker/login-action@v3
        with:
          registry: us-docker.pkg.dev
          username: oauth2accesstoken
          password: '${{ steps.auth.outputs.access_token }}'

#      - name: 'Reproducible Build: Cache var-cache-apt'
#        id: cache-var-cache-apt
#        uses: actions/cache@v3
#        with:
#          path: var-cache-apt
#          key: var-cache-apt-${{ hashFiles('Dockerfile') }}
#      - name: 'Reproducible Build: Cache var-lib-apt'
#        id: cache-var-lib-apt
#        uses: actions/cache@v3
#        with:
#          path: var-lib-apt
#          key: var-lib-apt-${{ hashFiles('Dockerfile') }}
#      - name: 'Reproducible Build: inject var-cache-apt'
#        uses: reproducible-containers/buildkit-cache-dance@v2.1.4
#        with:
#          cache-source: var-cache-apt
#          cache-target: /var/cache/apt
#          skip-extraction: ${{ steps.cache-var-cache-apt.outputs.cache-hit }}
#      - name: 'Reproducible Build: inject var-lib-apt'
#        uses: reproducible-containers/buildkit-cache-dance@v2.1.4
#        with:
#          cache-source: var-lib-apt
#          cache-target: /var/lib/apt
#          skip-extraction: ${{ steps.cache-var-lib-apt.outputs.cache-hit }}
#
#      - name: 'Reproducible Build: Pip cache'
#        id: root-pip-cache
#        uses: actions/cache@v3
#        with:
#          path: root-pip-cache
#          key: root-pip-cache-${{ hashFiles('Dockerfile') }}
#      - name: 'Reproducible Build: Inject Pip Cache'
#        uses: reproducible-containers/buildkit-cache-dance@v2.1.2
#        with:
#          cache-source: root-pip-cache
#          cache-target: /root/.cache/pip
#          skip-extraction: ${{ steps.root-pip-cache.outputs.cache-hit }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: 'Build and Push Base Images'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          file: ./Dockerfile
          outputs: type=registry,registry=us-docker.pkg.dev/replicate-production/replicate-us,rewrite-timestamp=true
          tags: ${{ steps.image_name.outputs.image_name }}
          #Eregistry: us-docker.pkg.dev/replicate-production/replicate-us
          platforms: linux/amd64,linux/arm64
          provenance: mode=max
          cache-from: type=gha
          cache-to: type=gha,mode=max
        env:
          SOURCE_DATE_EPOCH: 0
